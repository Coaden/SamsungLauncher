package com.android.vcard;

import java.util.HashMap;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class unicode50to60ForDCMEmoji {
    static HashMap<String, String> convertMap = new HashMap();
    static String emojiStr = "";

    static {
        convertMap.put("", "😉");
        convertMap.put("", "😆");
        convertMap.put("", "😋");
        convertMap.put("", "😁");
        convertMap.put("", "😃");
        convertMap.put("", "😏");
        convertMap.put("", "😍");
        convertMap.put("", "😌");
        convertMap.put("", "😒");
        convertMap.put("", "😅");
        convertMap.put("", "😓");
        convertMap.put("", "😞");
        convertMap.put("", "😔");
        convertMap.put("", "😖");
        convertMap.put("", "😵");
        convertMap.put("", "😣");
        convertMap.put("", "😱");
        convertMap.put("", "😭");
        convertMap.put("", "😢");
        convertMap.put("", "😠");
        convertMap.put("", "😡");
        convertMap.put("", "😜");
        convertMap.put("", "👤");
        convertMap.put("", "❤");
        convertMap.put("", "💓");
        convertMap.put("", "💔");
        convertMap.put("", "💕");
        convertMap.put("", "✨");
        convertMap.put("", "🎵");
        convertMap.put("", "🎶");
        convertMap.put("", "💡");
        convertMap.put("", "💦");
        convertMap.put("", "💧");
        convertMap.put("", "💨");
        convertMap.put("", "💤");
        convertMap.put("", "💢");
        convertMap.put("", "💥");
        convertMap.put("", "💣");
        convertMap.put("", "⚠");
        convertMap.put("", "✊");
        convertMap.put("", "✌");
        convertMap.put("", "✋");
        convertMap.put("", "👊");
        convertMap.put("", "👍");
        convertMap.put("", "👀");
        convertMap.put("", "👂");
        convertMap.put("", "💋");
        convertMap.put("", "👣");
        convertMap.put("", "❗");
        convertMap.put("", "‼");
        convertMap.put("", "⁉");
        convertMap.put("", "🐶");
        convertMap.put("", "🐱");
        convertMap.put("", "🐴");
        convertMap.put("", "🐷");
        convertMap.put("", "🐤");
        convertMap.put("", "🐧");
        convertMap.put("", "🐟");
        convertMap.put("", "🐌");
        convertMap.put("", "🍙");
        convertMap.put("", "🍞");
        convertMap.put("", "🍔");
        convertMap.put("", "🍜");
        convertMap.put("", "🎂");
        convertMap.put("", "🍰");
        convertMap.put("", "🍴");
        convertMap.put("", "☕");
        convertMap.put("", "🍸");
        convertMap.put("", "🍺");
        convertMap.put("", "🍵");
        convertMap.put("", "🍶");
        convertMap.put("", "🍷");
        convertMap.put("", "🍒");
        convertMap.put("", "🍌");
        convertMap.put("", "🍎");
        convertMap.put("", "☀");
        convertMap.put("", "☁");
        convertMap.put("", "☔");
        convertMap.put("", "⛄");
        convertMap.put("", "⚡");
        convertMap.put("", "🌀");
        convertMap.put("", "🌁");
        convertMap.put("", "🌃");
        convertMap.put("", "🌑");
        convertMap.put("", "🌔");
        convertMap.put("", "🌓");
        convertMap.put("", "🌙");
        convertMap.put("", "🌕");
        convertMap.put("", "🌊");
        convertMap.put("", "🍀");
        convertMap.put("", "🌷");
        convertMap.put("", "🌱");
        convertMap.put("", "🌸");
        convertMap.put("", "🍁");
        convertMap.put("", "🎄");
        convertMap.put("", "👕");
        convertMap.put("", "🎽");
        convertMap.put("", "👖");
        convertMap.put("", "👟");
        convertMap.put("", "👠");
        convertMap.put("", "👜");
        convertMap.put("", "👝");
        convertMap.put("", "🌂");
        convertMap.put("", "🎩");
        convertMap.put("", "👑");
        convertMap.put("", "👓");
        convertMap.put("", "💍");
        convertMap.put("", "🎀");
        convertMap.put("", "💄");
        convertMap.put("", "⚾");
        convertMap.put("", "⚽");
        convertMap.put("", "🏀");
        convertMap.put("", "⛳");
        convertMap.put("", "🎾");
        convertMap.put("", "🏃");
        convertMap.put("", "🏂");
        convertMap.put("", "🎿");
        convertMap.put("", "🏁");
        convertMap.put("", "♨");
        convertMap.put("", "🎠");
        convertMap.put("", "🎪");
        convertMap.put("", "🎬");
        convertMap.put("", "🎮");
        convertMap.put("", "🚲");
        convertMap.put("", "🚗");
        convertMap.put("", "🚙");
        convertMap.put("", "🚌");
        convertMap.put("", "🚃");
        convertMap.put("", "Ⓜ");
        convertMap.put("", "🚄");
        convertMap.put("", "💺");
        convertMap.put("", "✈");
        convertMap.put("", "⛵");
        convertMap.put("", "🚢");
        convertMap.put("", "🏠");
        convertMap.put("", "🏢");
        convertMap.put("", "🏫");
        convertMap.put("", "🏣");
        convertMap.put("", "🏥");
        convertMap.put("", "🏦");
        convertMap.put("", "🏧");
        convertMap.put("", "⛽");
        convertMap.put("", "🏪");
        convertMap.put("", "🏨");
        convertMap.put("", "🅿");
        convertMap.put("", "🚥");
        convertMap.put("", "🚩");
        convertMap.put("", "🚻");
        convertMap.put("", "🗻");
        convertMap.put("", "☎");
        convertMap.put("", "📱");
        convertMap.put("", "💻");
        convertMap.put("", "📠");
        convertMap.put("", "📟");
        convertMap.put("", "📺");
        convertMap.put("", "📷");
        convertMap.put("", "🎤");
        convertMap.put("", "🎧");
        convertMap.put("", "🎥");
        convertMap.put("", "🎨");
        convertMap.put("", "🎫");
        convertMap.put("", "💿");
        convertMap.put("", "⌚");
        convertMap.put("", "⏰");
        convertMap.put("", "⏳");
        convertMap.put("", "👛");
        convertMap.put("", "💰");
        convertMap.put("", "✏");
        convertMap.put("", "✒");
        convertMap.put("", "📎");
        convertMap.put("", "✂");
        convertMap.put("", "📖");
        convertMap.put("", "📝");
        convertMap.put("", "🔧");
        convertMap.put("", "🚪");
        convertMap.put("", "🔔");
        convertMap.put("", "🔍");
        convertMap.put("", "🎁");
        convertMap.put("", "🔑");
        convertMap.put("", "📲");
        convertMap.put("", "✉");
        convertMap.put("", "📩");
        convertMap.put("", "💌");
        convertMap.put("", "🆗");
        convertMap.put("", "🆖");
        convertMap.put("", "🆕");
        convertMap.put("", "🆓");
        convertMap.put("", "🆔");
        convertMap.put("", "🆑");
        convertMap.put("", "🈲");
        convertMap.put("", "🈳");
        convertMap.put("", "🈴");
        convertMap.put("", "🈵");
        convertMap.put("", "㊙");
        convertMap.put("", "🚭");
        convertMap.put("", "🚬");
        convertMap.put("", "♿");
        convertMap.put("", "♻");
        convertMap.put("", "©");
        convertMap.put("", "®");
        convertMap.put("", "™");
        convertMap.put("", "💴");
        convertMap.put("", "➿");
        convertMap.put("", "💠");
        convertMap.put("", "〰");
        convertMap.put("", "➰");
        convertMap.put("", "⤴");
        convertMap.put("", "⤵");
        convertMap.put("", "↕");
        convertMap.put("", "↔");
        convertMap.put("", "↗");
        convertMap.put("", "↘");
        convertMap.put("", "↖");
        convertMap.put("", "↙");
        convertMap.put("", "↩");
        convertMap.put("", "🔛");
        convertMap.put("", "🔚");
        convertMap.put("", "🔜");
        convertMap.put("", "♈");
        convertMap.put("", "♉");
        convertMap.put("", "♊");
        convertMap.put("", "♋");
        convertMap.put("", "♌");
        convertMap.put("", "♍");
        convertMap.put("", "♎");
        convertMap.put("", "♏");
        convertMap.put("", "♐");
        convertMap.put("", "♑");
        convertMap.put("", "♒");
        convertMap.put("", "♓");
        convertMap.put("", "♥");
        convertMap.put("", "♠");
        convertMap.put("", "♦");
        convertMap.put("", "♣");
        convertMap.put("", "#⃣");
        convertMap.put("", "1⃣");
        convertMap.put("", "2⃣");
        convertMap.put("", "3⃣");
        convertMap.put("", "4⃣");
        convertMap.put("", "5⃣");
        convertMap.put("", "6⃣");
        convertMap.put("", "7⃣");
        convertMap.put("", "8⃣");
        convertMap.put("", "9⃣");
        convertMap.put("", "0⃣");
        convertMap.put("", "󾸐");
        convertMap.put("", "󾸑");
        convertMap.put("", "󾸒");
        convertMap.put("", "󾸓");
        convertMap.put("", "󾠭");
        convertMap.put("", "󾸔");
        convertMap.put("", "󾸕");
    }

    private static String getsurogateIfNeed(String string, String bineryString) {
        if (string != null && string.length() < 5) {
            return "\\u" + string;
        }
        int pos;
        int highSurogatePrefix = Integer.parseInt("1101100000000000", 2);
        int lowSurogatePrefix = Integer.parseInt("1101110000000000", 2);
        if (bineryString.length() > 10) {
            pos = bineryString.length() - 10;
        } else {
            pos = 0;
        }
        String highSurogate = bineryString.substring(0, pos);
        return "\\u" + Integer.toHexString((Integer.parseInt(highSurogate, 2) + highSurogatePrefix) - Integer.parseInt("1000000", 2)) + "\\u" + Integer.toHexString(lowSurogatePrefix + Integer.parseInt(bineryString.substring(pos), 2));
    }

    public static String convert(String stringinDcmEmoji_str) {
        HashSet<String> finded = new HashSet();
        Matcher m = Pattern.compile("[" + emojiStr + "]").matcher(stringinDcmEmoji_str);
        while (m.find()) {
            String matstr = m.group();
            if (!finded.contains(matstr)) {
                finded.add(matstr);
                stringinDcmEmoji_str = stringinDcmEmoji_str.replace(matstr, (CharSequence) convertMap.get(matstr));
            }
        }
        return stringinDcmEmoji_str;
    }
}
